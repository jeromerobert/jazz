/**
 * Copyright 1998-1999 by University of Maryland, College Park, MD 20742, USA
 * All rights reserved.
 */
package edu.umd.cs.jazz.event;

import java.awt.AWTEvent;

import edu.umd.cs.jazz.scenegraph.*;

/**
 * A low-level event which indicates that a node has changed.
 * <P>
 * Node events are provided for notification purposes ONLY;
 * Jazz will automatically handle changes to the containers
 * contents internally so that the program works properly regardless of
 * whether the program is receiving these events or not.
 * <P>
 * This low-level event is generated by a node object
 * when a node transformed, made visible or invisible, and
 * when another node is added to it or removed from it. 
 * The event is passed to every <code>ZNodeContainerListener</code>
 * or <code>ZNodeContainerAdapter</code> object which registered to receive such
 * events using the node's <code>addContainerListener</code> method.
 * (<code>ZNodeContainerAdapter</code> objects implement the 
 * <code>ZNodeContainerListener</code> interface.) Each such listener object 
 * gets this <code>ZNodeContainerEvent</code> when the event occurs.
 *
 * @see ZNodeContainerAdapter
 * @see ZNodeContainerListener
 *
 * @author Ben Bederson
 */
public class ZNodeContainerEvent extends AWTEvent {

    /**
     * The first number in the range of ids used for container events.
     */
    public static final int NODE_CONTAINER_FIRST = 200;

    /**
     * The last number in the range of ids used for container events.
     */
    public static final int NODE_CONTAINER_LAST	= 201;

   /**
     * This event indicates that a node was added to the container.
     */
    public static final int NODE_ADDED	= NODE_CONTAINER_FIRST;

    /**
     * This event indicates that a node was removed from the container.
     */
    public static final int NODE_REMOVED = 1 + NODE_CONTAINER_FIRST;

    /**
     * The non-null node that is being added or
     * removed from the Container.
     *
     * @serial
     * @see getChild
     */
    ZNode child;

    /**
     * Constructs a ZNodeContainerEvent object.
     * 
     * @param source the ZNode object (container) that originated the event
     * @param id     an integer indicating the type of event
     * @param child  the node that was added or removed
     */
    public ZNodeContainerEvent(ZNode source, int id, ZNode child) {
        super(source, id);
        this.child = child;
    }

    /**
     * Returns the originator of the event.
     *
     * @return the ZNode object that originated the event
     */
    public ZNode getNode() {
        return (ZNode)source;   // Cast is ok, checked in constructor
    }

    /**
     * Returns the ZNode that was affected by the event.
     *
     * @return the ZNode object that was added or removed
     */
    public ZNode getChild() {
        return child;
    }
}
