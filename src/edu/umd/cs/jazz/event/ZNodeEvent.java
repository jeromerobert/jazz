/**
 * Copyright 1998-1999 by University of Maryland, College Park, MD 20742, USA
 * All rights reserved.
 */
package edu.umd.cs.jazz.event;

import java.awt.AWTEvent;
import java.awt.geom.AffineTransform;

import edu.umd.cs.jazz.scenegraph.*;

/**
 * A low-level event which indicates that a node has changed.
 * <P>
 * Node events are provided for notification purposes ONLY;
 * Jazz will automatically handle changes to the containers
 * contents internally so that the program works properly regardless of
 * whether the program is receiving these events or not.
 * <P>
 * This low-level event is generated by a node object
 * when a node is transformed, made visible or invisible.
 * The event is passed to every <code>ZNodeListener</code>
 * or <code>ZNodeAdapter</code> object which registered to receive such
 * events using the node's <code>addContainerListener</code> method.
 * (<code>ZNodeAdapter</code> objects implement the 
 * <code>ZNodeListener</code> interface.) Each such listener object 
 * gets this <code>ZNodeEvent</code> when the event occurs.
 *
 * @see ZNodeAdapter
 * @see ZNodeListener
 *
 * @author Ben Bederson
 */
public class ZNodeEvent extends AWTEvent {

    /**
     * The first number in the range of ids used for container events.
     */
    public static final int NODE_FIRST       = 100;

    /**
     * The last number in the range of ids used for container events.
     */
    public static final int NODE_LAST        = 102;
    /**
     * This event indicates that the node's transform changed.
     */
    public static final int NODE_TRANSFORMED = NODE_FIRST;

    /**
     * This event indicates that the node was made visible.
     */
    public static final int NODE_SHOWN       = 1 + NODE_FIRST;

    /**
     * This event indicates that the node was made invisible.
     */
    public static final int NODE_HIDDEN      = 2 + NODE_FIRST;

    /**
     * The value of the transform before the transform was changed
     * for transform events (or null for other event types).
     */
    public AffineTransform transform = null;

    /**
     * Constructs a ZNodeEvent object.
     * 
     * @param source    the ZNode object that originated the event
     * @param id        an integer indicating the type of event
     * @param transform The original transform of the node (for transform events)
     */
    public ZNodeEvent(ZNode source, int id, AffineTransform transform) {
        super(source, id);
	this.transform = transform;
    }

    /**
     * Returns the originator of the event.
     *
     * @return the ZNode object that originated the event
     */
    public ZNode getNode() {
        return (ZNode)source;   // Cast is ok, checked in constructor
    }

    /**
     * For transform events, this returns the value of the transform
     * before the transform was changed.
     *
     * @return the the original transform value.
     */
    public AffineTransform getOrigTransform() {
        return transform;
    }
}
