/**
 * Copyright 1998-1999 by University of Maryland, College Park, MD 20742, USA
 * All rights reserved.
 */
package edu.umd.cs.jazz.event;

import java.awt.*;
import java.awt.event.*;
import java.awt.geom.*;
import java.io.*;

import edu.umd.cs.jazz.*;
import edu.umd.cs.jazz.util.*;

/**
 * <b>ZMouseEvent</b> is an event which indicates that a mouse action occurred in a node.
 * This event is used both for mouse events (click, enter, exit) and mouse 
 * motion events (moves and drags). 
 * <P>
 * This low-level event is generated by a node object for:
 * <ul>
 * <li>Mouse Events
 *     <ul>
 *     <li>a mouse button is pressed
 *     <li>a mouse button is released
 *     <li>a mouse button is clicked (pressed and released)
 *     <li>the mouse cursor enters a node
 *     <li>the mouse cursor exits a node
 *     </ul>
 * <li> Mouse Motion Events
 *     <ul>
 *     <li>the mouse is moved
 *     <li>the mouse is dragged
 *     </ul>
 * </ul>
 * <P>
 * A ZMouseEvent object is passed to every <code>ZMouseListener</code>
 * or <code>ZMouseAdapter</code> object which registered to receive 
 * the "interesting" mouse events using the component's 
 * <code>addMouseListener</code> method.
 * (<code>ZMouseAdapter</code> objects implement the 
 * <code>ZMouseListener</code> interface.) Each such listener object 
 * gets a <code>ZMouseEvent</code> containing the mouse event.
 * <P>
 * A ZMouseEvent object is also passed to every <code>ZMouseMotionListener</code>
 * or <code>ZMouseMotionAdapter</code> object which registered to receive 
 * mouse motion events using the component's <code>addMouseMotionListener</code>
 * method. (<code>ZMouseMotionAdapter</code> objects implement the 
 * <code>ZMouseMotionListener</code> interface.) Each such listener object 
 * gets a <code>ZMouseEvent</code> containing the mouse motion event.
 *   
 * @see ZMouseAdapter
 * @see ZMouseListener
 * @see ZMouseMotionAdapter
 * @see ZMouseMotionListener
 */
public class ZMouseEvent extends MouseEvent {
    private int id;		   // The id that specifies the event trigger (press, release, etc.)
    private ZNode node;		   // The node that the event occurred on
    private ZSceneGraphPath path;  // The path the event took from the ZCanvas to the visual component

    /**
     * Constructs a new ZMouse event from a Java MouseEvent.
     * @param id The event type (MOUSE_PRESSED, MOUSE_RELEASED, MOUSE_CLICKED, MOUSE_ENTERED, MOUSE_EXITED, MOUSE_MOVED, MOUSE_DRAGGED)
     * @param node The node the event occurred on
     * @param e The original Java mouse event
     * @param path The path the event took from the ZCanvas to the visual component
     */
    public ZMouseEvent(int id, ZNode node, MouseEvent e, ZSceneGraphPath path) {
	super((Component)e.getSource(), e.getID(), e.getWhen(), e.getModifiers(), e.getX(), e.getY(), e.getClickCount(), e.isPopupTrigger());
	this.id = id;
	this.node = node;
	this.path = path;
    }

    /**
     * Determine the event type.
     * @return the id
     */
    public int getID() { 
	return id;
    }

    /**
     * Determine the node the event ocurred on
     * @return the node.
     */
    public ZNode getNode() {
	return node;
    }

    /**
     * Determine the path the event took from the ZCanvas down to the visual component.
     */
    public ZSceneGraphPath getPath() {
	return path;
    }
}
